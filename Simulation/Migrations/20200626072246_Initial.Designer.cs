// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simulation.Data.System;

namespace Simulation.Migrations
{
    [DbContext(typeof(SiteDbContext))]
    [Migration("20200626072246_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3B1C34F1-C8E6-4013-AB5F-DF156968DAAE",
                            ConcurrencyStamp = "bce43806-eb2b-4748-b7b7-cbaddb6e75ce",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "81F5E7BF-CAD7-4EEE-8D8B-2ABB2B071849",
                            ConcurrencyStamp = "057b9494-ace3-46bb-877d-d55336620f98",
                            Name = "Confirmed",
                            NormalizedName = "CONFIRMED"
                        },
                        new
                        {
                            Id = "F090C70C-FFD2-49D2-9C57-A81DF9384206",
                            ConcurrencyStamp = "537f5b9d-2aa2-4ed4-8f71-4ec65747de3e",
                            Name = "Registered",
                            NormalizedName = "REGISTERED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "A34B367E-7677-4730-BAD0-13A419B0796A",
                            RoleId = "F090C70C-FFD2-49D2-9C57-A81DF9384206"
                        },
                        new
                        {
                            UserId = "A34B367E-7677-4730-BAD0-13A419B0796A",
                            RoleId = "81F5E7BF-CAD7-4EEE-8D8B-2ABB2B071849"
                        },
                        new
                        {
                            UserId = "A34B367E-7677-4730-BAD0-13A419B0796A",
                            RoleId = "3B1C34F1-C8E6-4013-AB5F-DF156968DAAE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Simulation.Data.Entities.System.LocalizedMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Locale")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sentence")
                        .HasColumnType("int");

                    b.Property<int>("Word")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LocalizedMessages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2ea1dab-1924-4ea6-9e43-a0194e21855d"),
                            Locale = 0,
                            Message = "Bye",
                            Sentence = -1,
                            Word = 0
                        },
                        new
                        {
                            Id = new Guid("bf562d8b-b10f-47de-95e1-1cdb8dd236d5"),
                            Locale = 0,
                            Message = "Danger",
                            Sentence = -1,
                            Word = 1
                        },
                        new
                        {
                            Id = new Guid("087620e1-d585-4259-98b2-87801c9af9b2"),
                            Locale = 0,
                            Message = "Dark",
                            Sentence = -1,
                            Word = 2
                        },
                        new
                        {
                            Id = new Guid("e8bbb596-cadf-41d2-872c-a0d6c63002ba"),
                            Locale = 0,
                            Message = "Email",
                            Sentence = -1,
                            Word = 3
                        },
                        new
                        {
                            Id = new Guid("672ba02a-a64f-40a8-b73f-a72c22542300"),
                            Locale = 0,
                            Message = "Information",
                            Sentence = -1,
                            Word = 4
                        },
                        new
                        {
                            Id = new Guid("c9f5b633-7be0-4dfd-bba4-03d1d8ee6d66"),
                            Locale = 0,
                            Message = "Tip",
                            Sentence = -1,
                            Word = 5
                        },
                        new
                        {
                            Id = new Guid("30505114-973a-4f4e-bd98-ec28fd757a7c"),
                            Locale = 0,
                            Message = "Primary",
                            Sentence = -1,
                            Word = 6
                        },
                        new
                        {
                            Id = new Guid("6c2e94a9-0fde-4114-91ee-5d9c50251fe5"),
                            Locale = 0,
                            Message = "Secondary",
                            Sentence = -1,
                            Word = 7
                        },
                        new
                        {
                            Id = new Guid("575a4a2d-c1a3-4126-bcf1-d5dc8493c7a4"),
                            Locale = 0,
                            Message = "Success",
                            Sentence = -1,
                            Word = 8
                        },
                        new
                        {
                            Id = new Guid("05da1568-92e2-4c13-8fb3-875b47ff7d99"),
                            Locale = 0,
                            Message = "User name",
                            Sentence = -1,
                            Word = 9
                        },
                        new
                        {
                            Id = new Guid("bc26e07b-9a27-4a39-af0d-472373015a0f"),
                            Locale = 0,
                            Message = "Warning",
                            Sentence = -1,
                            Word = 10
                        },
                        new
                        {
                            Id = new Guid("4f1c35ec-0bfc-44d7-b018-84353763f10e"),
                            Locale = 0,
                            Message = "Welcome",
                            Sentence = -1,
                            Word = 11
                        },
                        new
                        {
                            Id = new Guid("fe54e1f3-7707-4d81-9412-c0f8a847d176"),
                            Locale = 0,
                            Message = "Account deleted",
                            Sentence = 0,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("aedbc25c-bb65-4f14-92ea-d7c91206e9e4"),
                            Locale = 0,
                            Message = "Can not create a user",
                            Sentence = 1,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("8f858baa-2846-4611-91f8-df3d253f7a67"),
                            Locale = 0,
                            Message = "is already taken",
                            Sentence = 2,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("d7290a7f-4053-4765-92bd-9fda5d725efc"),
                            Locale = 0,
                            Message = "Last time you were on the site is",
                            Sentence = 3,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("eb1d39ab-6946-4654-a2b7-d31da9a0b4bb"),
                            Locale = 0,
                            Message = "or more",
                            Sentence = 4,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("d30fcd3d-c26d-4b2c-968d-08ad0888f76f"),
                            Locale = 0,
                            Message = "Password must contain at least",
                            Sentence = 5,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("7f7cf1a6-0bf0-4378-baee-6146ce977489"),
                            Locale = 0,
                            Message = "Passwords mismatch",
                            Sentence = 6,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("b0ababd4-fcd0-43f9-8669-86815f95e700"),
                            Locale = 0,
                            Message = "See you again",
                            Sentence = 7,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("eea5c066-842b-4608-bfec-d706e1ece19c"),
                            Locale = 0,
                            Message = "Site error",
                            Sentence = 8,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("c696cf4e-7a29-41fb-97aa-cf94e78773ee"),
                            Locale = 0,
                            Message = "This is your first authorized visit to site",
                            Sentence = 9,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("f180937d-d98a-4660-bc82-41dce5966b5b"),
                            Locale = 0,
                            Message = "User not found",
                            Sentence = 10,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("b0e6ed47-9b54-4936-af41-200c22bd819a"),
                            Locale = 0,
                            Message = "Verification code successfully send to your email",
                            Sentence = 11,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("e526e4e8-f85e-4467-b58d-9c1c2f042315"),
                            Locale = 0,
                            Message = "Wrong Email verification code",
                            Sentence = 12,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("afe92478-a9e0-4422-88bd-f206e9ab5db5"),
                            Locale = 0,
                            Message = "Wrong password",
                            Sentence = 13,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("4dfdaff6-603e-4859-bef7-0b33d7d74bf8"),
                            Locale = 0,
                            Message = "Wrong user credentials to verify your email",
                            Sentence = 14,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("a22aa690-5b3d-4445-8de4-4b742a2fedbe"),
                            Locale = 0,
                            Message = "You are not allowed",
                            Sentence = 15,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("aa5b2b3f-a6b3-49c3-99d5-cca871f6a53f"),
                            Locale = 0,
                            Message = "You must confirm it before login",
                            Sentence = 16,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("02d3ee00-2f51-4d89-8699-9ba120c26d18"),
                            Locale = 0,
                            Message = "Your Email is confirmed",
                            Sentence = 17,
                            Word = -1
                        },
                        new
                        {
                            Id = new Guid("53704287-05c8-4a2c-8a8b-62d6f8d7a35b"),
                            Locale = 0,
                            Message = "Your Email is not confirmed",
                            Sentence = 18,
                            Word = -1
                        });
                });

            modelBuilder.Entity("Simulation.Data.Entities.System.SiteUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Locale")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "A34B367E-7677-4730-BAD0-13A419B0796A",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a825bd58-1cb0-411c-a9e8-a430117a3767",
                            ConfirmDate = new DateTime(2020, 6, 26, 7, 22, 44, 430, DateTimeKind.Utc).AddTicks(5112),
                            Email = "admin@rboard.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Administrator",
                            Locale = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RBOARD.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFBcd5Nh/zijOC+1cfYEzkZEafuY9Q7EytWf4cj4jSABSOPWTCVfBivAeSpUITRCuw==",
                            PhoneNumberConfirmed = false,
                            RegisterDate = new DateTime(2020, 6, 26, 7, 22, 44, 430, DateTimeKind.Utc).AddTicks(2262),
                            SecurityStamp = "85e02a8a-11d3-4386-a295-98d39aebbc28",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Simulation.Data.Entities.System.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Simulation.Data.Entities.System.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulation.Data.Entities.System.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Simulation.Data.Entities.System.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
