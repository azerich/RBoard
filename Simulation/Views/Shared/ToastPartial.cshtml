@{
    if (TempData.ContainsKey(nameof(ToastMessageElements.ToastMessageType))
        && TempData[nameof(ToastMessageElements.ToastMessageType)].ToString().Length > 0)
    {
        ViewData[nameof(ToastMessageElements.ToastMessageType)] = TempData[nameof(ToastMessageElements.ToastMessageType)].ToString();
        ViewData[nameof(ToastMessageElements.ToastMessageIcon)] = TempData[nameof(ToastMessageElements.ToastMessageIcon)].ToString();
        ViewData[nameof(ToastMessageElements.ToastMessageMuted)] = TempData[nameof(ToastMessageElements.ToastMessageMuted)].ToString();
        ViewData[nameof(ToastMessageElements.ToastMessageTitle)] = TempData[nameof(ToastMessageElements.ToastMessageTitle)].ToString();
        ViewData[nameof(ToastMessageElements.ToastMessageBody)] = TempData[nameof(ToastMessageElements.ToastMessageBody)].ToString();

    <div class="position-absolute w-100 d-flex flex-column p-4">
        <div class="toast ml-auto fade show" role="alert" data-delay="700" data-autohide="false">
            <div class="toast-header">
                <i class="fas @ViewData[nameof(ToastMessageElements.ToastMessageIcon)] text-@ViewData[nameof(ToastMessageElements.ToastMessageType)] mr-1"></i>
                <strong class="mr-auto text-@ViewData[nameof(ToastMessageElements.ToastMessageType)]">@ViewData[nameof(ToastMessageElements.ToastMessageTitle)]</strong>
                <small class="text-muted ml-1">@ViewData[nameof(ToastMessageElements.ToastMessageMuted)] UTC</small>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true" onclick="HideToast();">&times;</span>
                </button>
            </div>
            <div class="toast-body">&nbsp;@ViewData[nameof(ToastMessageElements.ToastMessageBody)]&nbsp;</div>
        </div>
    </div>
    }
}